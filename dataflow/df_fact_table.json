{
	"name": "df_fact_table",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_restaurant",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_city",
						"type": "DatasetReference"
					},
					"name": "CityTable"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_hotel",
						"type": "DatasetReference"
					},
					"name": "HotelTable"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_Speiality1",
						"type": "DatasetReference"
					},
					"name": "Speciality1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_Speiality2",
						"type": "DatasetReference"
					},
					"name": "Speciality2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_fact",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sort1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Name as string,",
				"          City as string,",
				"          Speciality_1 as string,",
				"          Speciality_2 as string,",
				"          AvgDinnerPrice as integer,",
				"          AvgLunchPrice as integer,",
				"          TotalRating as double,",
				"          DinnerRating as double,",
				"          LunchRating as double,",
				"          Lat as double,",
				"          Long as double,",
				"          Has_Table_booking as boolean,",
				"          Has_Online_delivery as boolean,",
				"          Votes as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source(output(",
				"          City_Id as long,",
				"          City_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CityTable",
				"source(output(",
				"          Hotel_Id as long,",
				"          Hotel_Name as string,",
				"          Hotel_City as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> HotelTable",
				"source(output(",
				"          Speciality1_Id as long,",
				"          Speciality_1 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Speciality1",
				"source(output(",
				"          Speciality2_ID as long,",
				"          Speciality_2 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Speciality2",
				"select3 sort(asc(Hotel_Id, true)) ~> sort1",
				"sort1 keyGenerate(output(Fact_Id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 select(mapColumn(",
				"          Fact_Id,",
				"          Hotel_Id,",
				"          City_Id,",
				"          Speciality1_Id,",
				"          Speciality2_Id,",
				"          AvgDinnerPrice,",
				"          AvgLunchPrice,",
				"          TotalRating,",
				"          DinnerRating,",
				"          LunchRating,",
				"          Lat,",
				"          Long_Fld = Long,",
				"          Has_Table_booking,",
				"          Has_Online_delivery,",
				"          Votes",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"source, CityTable join(City == City_Name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, HotelTable join(Name == Hotel_Name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, Speciality1 join(source@Speciality_1 == Speciality1@Speciality_1,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, Speciality2 join(source@Speciality_2 == Speciality2@Speciality_2,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 select(mapColumn(",
				"          Hotel_Id,",
				"          City_Id,",
				"          Speciality1_Id,",
				"          Speciality2_Id = Speciality2_ID,",
				"          AvgDinnerPrice,",
				"          AvgLunchPrice,",
				"          TotalRating,",
				"          DinnerRating,",
				"          LunchRating,",
				"          Lat,",
				"          Long,",
				"          Has_Table_booking,",
				"          Has_Online_delivery,",
				"          Votes",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          City_Id as long,",
				"          City_Name as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}