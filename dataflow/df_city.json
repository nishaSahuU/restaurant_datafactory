{
	"name": "df_city",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_restaurant",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_city",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Name as string,",
				"          City as string,",
				"          Speciality_1 as string,",
				"          Speciality_2 as string,",
				"          AvgDinnerPrice as string,",
				"          AvgLunchPrice as string,",
				"          TotalRating as string,",
				"          DinnerRating as string,",
				"          LunchRating as string,",
				"          Lat as string,",
				"          Long as string,",
				"          Has_Table_booking as string,",
				"          Has_Online_delivery as string,",
				"          Votes as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source select(mapColumn(",
				"          City_Name = City",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sort(asc(City_Name, true)) ~> sort1",
				"sort1 aggregate(groupBy(City_Name),",
				"     each(match(name!=\"City_Name\"), $$ = first($$))) ~> aggregate1",
				"aggregate1 keyGenerate(output(City_Id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 select(mapColumn(",
				"          City_Id,",
				"          City_Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          City_Id as long,",
				"          City_Name as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}